---
description: Supabase authentication, database, and storage patterns
---

# Supabase - Autentica칞칚o, Database e Storage

## 游댏 Autentica칞칚o
- **Session Management**: Context API para estado global do usu치rio
- **Auto-refresh**: configurar refresh autom치tico de tokens
- **Offline Support**: cache de sess칚o no AsyncStorage
- **Error Handling**: tratar expira칞칚o de sess칚o graciosamente

```typescript
// Context de Autentica칞칚o obrigat칩rio
interface AuthContextType {
  user: User | null;
  session: Session | null;
  signIn: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
  loading: boolean;
}
```

## 游듺 Database - Tabela `yawn_events`

**Schema obrigat칩rio:**
```sql
CREATE TABLE yawn_events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id),
  timestamp TIMESTAMPTZ NOT NULL,
  image_url TEXT,
  keypoints JSONB NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

**RLS Policies:**
- Usu치rios s칩 podem ver seus pr칩prios eventos
- Insert/Update apenas para user_id pr칩prio

## 游늬 Storage - Imagens de Bocejo
- **Bucket**: `yawn-images` (p칰blico para leitura)
- **Estrutura**: `{user_id}/{session_id}/{timestamp}.jpg`
- **Compress칚o**: reduzir qualidade para 70% antes upload
- **Cleanup**: remover imagens antigas (> 30 dias)

## 游댃 Padr칫es de Uso
```typescript
// Service abstrato obrigat칩rio
class YawnEventService {
  async saveYawnEvent(data: YawnEventData): Promise<YawnEvent> {
    // 1. Upload da imagem
    // 2. Insert no database
    // 3. Rollback se falhar
  }

  async getUserYawnEvents(userId: string): Promise<YawnEvent[]> {
    // Com filtros de data/sess칚o
  }
}
```

## 游뚿 Tratamento de Offline
- **Queue local**: armazenar eventos quando offline
- **Sync autom치tico**: quando conex칚o retornar
- **Conflict resolution**: timestamp como tiebreaker
- **Progress feedback**: mostrar status de sincroniza칞칚o

## 游댢 Configura칞칚o Requerida
```typescript
// supabase/config.ts
const supabaseConfig = {
  url: process.env.EXPO_PUBLIC_SUPABASE_URL!,
  anonKey: process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!,
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  }
};
```